{
	"info": {
		"_postman_id": "439b9e2b-4d72-4655-9ff5-b8fc7c28d9ec",
		"name": "ISV OCC Payment SSE",
		"description": "This collection is included into SSE package which can be used for testing and exploring the endpoints.\n\nThe following collection variables should be updated prior its running:\n\nOCC_ENVIRONMENT\nAPP_KEY\napplePayInitiativeContext",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"token\", data.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{APP_KEY}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "token",
							"value": "",
							"type": "text",
							"disabled": true
						}
					],
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccadmin/v1/login",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccadmin",
						"v1",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Payment Methods",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response;",
							"const PAYMENTS_SCHEMA = pm.variables.get(\"schema\");",
							"",
							"",
							"",
							"pm.test(\"Schema is valid\", () => { ",
							"    response.to.have.jsonSchema(PAYMENTS_SCHEMA);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//No parse needed",
							"const payment_schema = {",
							"    title: 'paymentMethods schema',",
							"    type: 'object',",
							"    required: ['paymentMethods'],",
							"    properties: {",
							"        paymentMethods: {",
							"            type: 'array',",
							"            minItems: 1,",
							"            items: {",
							"                type: 'object'",
							"            }",
							"        }",
							"    }",
							"};",
							"//This variable needs to be parse JSON.parse(working_collection)",
							"var working_collection = {",
							"    \"type\": \"object\",",
							"    \"required\":[\"paymentMethods\"],",
							"    \"properties\":{",
							"        \"paymentMethods\": {",
							"            \"type\":\"array\",",
							"            \"minItems\": 1,",
							"            \"maxItems\": 3,",
							"            \"items\": {",
							"            \"type\": \"object\"",
							"            }",
							"        }",
							"    }",
							"};",
							"",
							"pm.variables.set(\"schema\", payment_schema);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/javascript, */*; q=0.01",
						"type": "text"
					},
					{
						"key": "channel",
						"value": "{{CHANNEL}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/paymentMethods",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"paymentMethods"
					]
				},
				"description": "Returns configuration for supported (enabled) payment methods "
			},
			"response": []
		},
		{
			"name": "Generate Flex Capture Context",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"Should generate flex capture context key Id\", () => {",
							"    pm.expect(responseJson).to.have.property('captureContext');",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json, text/javascript, */*; q=0.01"
					},
					{
						"key": "channel",
						"type": "text",
						"value": "{{CHANNEL}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"targetOrigin\":\"https://testdomain:8080\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/keys",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"keys"
					]
				},
				"description": "Request a Flex Capture Context directly from payment provider"
			},
			"response": []
		},
		{
			"name": "Generate ApplePay session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"var expected_applePayInitiativeContext = pm.collectionVariables.get('applePayInitiativeContext');",
							"var actual_applePayInitiativeContext = responseJson.domainName;",
							"",
							"pm.test(\"Should create session\", () => {",
							"    pm.expect(responseJson).to.have.property('domainName');",
							"    pm.expect(actual_applePayInitiativeContext).to.eql(expected_applePayInitiativeContext);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "channel",
						"value": "{{CHANNEL}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"validationUrl\":\"https://apple-pay-gateway-cert.apple.com/paymentservices/startSession\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/applepay/validate",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"applepay",
						"validate"
					]
				},
				"description": "Requesting an Apple Pay Payment Session"
			},
			"response": []
		},
		{
			"name": "Payments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"",
							"",
							"pm.test(\"Should handle credit card authorization\", () => {",
							"  pm.expect(responseJson.authorizationResponse.authCode).to.eql(\"AUTHORIZED\");",
							"  pm.expect(responseJson.authorizationResponse.responseCode).to.eql('1000');",
							"  pm.expect(responseJson.authorizationResponse.responseReason).to.eql(\"AUTHORIZED\");",
							"  pm.expect(responseJson.authorizationResponse.responseDescription).to.eql(\"AUTHORIZED\");",
							"});",
							"",
							"pm.globals.set('currencyCode', responseJson.currencyCode);",
							"pm.globals.set('amount', responseJson.authorizationResponse.amount);",
							"pm.globals.set('hostTransactionId', responseJson.authorizationResponse.hostTransactionId);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const SECRET_KEY = \"3ftGntd9GSnlTJ+pWddY7xBgL9tx3VlwqJjW8h79nvD8qJsJ0gUBv32Pc2kYbFLDvfSwPzEOA3NE2NHyRbv1iw==\";",
							"const PAYLOAD = pm.request.body.raw;",
							"",
							"const decoded_secret_key = Buffer.from(SECRET_KEY, 'base64');",
							"",
							"const secret_array=CryptoJS.lib.WordArray.create(decoded_secret_key);",
							"var hash = CryptoJS.HmacSHA512(PAYLOAD, secret_array);",
							"",
							"pm.collectionVariables.set(\"webhook_signature\", hash.toString(CryptoJS.enc.Base64));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "channel",
						"value": "storefront",
						"type": "text"
					},
					{
						"key": "x-oracle-cc-webhook-signature-sha512",
						"value": "{{webhook_signature}}",
						"type": "text"
					},
					{
						"key": "backup",
						"value": "cEcJG3hbL8dD1qQlwOffe9WKLBk=",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"transactionId\": \"o30446-pg30417-1458555741310\",\n    \"currencyCode\": \"USD\",\n    \"paymentId\": \"pg30417\",\n    \"locale\": \"en\",\n    \"siteURL\": \"https://www.example.com\",\n    \"cardDetails\": {\n        \"expirationMonth\": \"02\",\n        \"expirationYear\": \"2022\",\n        \"cvv\": \"234\",\n        \"number\": \"4111111111111111\",\n        \"type\": \"visa\",\n        \"holderName\": \"Marie Rubio\"\n    },\n    \"amount\": \"000000402526\",\n    \"transactionType\": \"0100\",\n    \"transactionTimestamp\": \"2019-11-21T10:22:21+0000\",\n    \"siteId\": \"siteUS\",\n    \"billingAddress\": {\n        \"lastName\": \"Shopper\",\n        \"postalCode\": \"01242\",\n        \"phoneNumber\": \"617-555-1977\",\n        \"email\": \"tshopper@example.com\",\n        \"state\": \"MA\",\n        \"address1\": \"1 Main Street\",\n        \"address2\": \"\",\n        \"firstName\": \"Marie\",\n        \"city\": \"Cambridge\",\n        \"country\": \"US\"\n    },\n    \"channel\": \"storefront\",\n    \"shippingAddress\": {\n        \"lastName\": \"Rubio\",\n        \"postalCode\": \"01242\",\n        \"phoneNumber\": \"617-555-1977\",\n        \"email\": \"tshopper@example.com\",\n        \"state\": \"MA\",\n        \"address1\": \"1 Main Street\",\n        \"address2\": \"\",\n        \"firstName\": \"Marie\",\n        \"city\": \"Cambridge\",\n        \"country\": \"US\"\n    },\n    \"orderId\": \"o30446\",\n    \"paymentMethod\": \"card\",\n    \"gatewayId\": \"isv-occ-gateway\",\n    \"profile\": {\n        \"id\": \"110454\",\n        \"phoneNumber\": \"617-555-1977\",\n        \"email\": \"tshopper@example.com\"\n    },\n    \"profileDetails\": {\n        \"id\": \"110454\",\n        \"lastName\": \"Rubio\",\n        \"firstName\": \"Marie\",\n        \"taxExempt\": false,\n        \"profileType\": \"b2c_user\",\n        \"receiveEmail\": \"no\",\n        \"registrationDate\": \"2019-10-15T06:50:51.000Z\",\n        \"lastPasswordUpdate\": \"2019-10-15T06:50:51.000Z\"\n    },\n    \"retryPaymentCount\": 0,\n    \"auxiliaryProperties\": {\n        \"authenticationMethod\": \"local\",\n        \"shopperAccountPaymentAccountFirstUseDate\": \"2019-10-17T06:14:06.004Z\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/payments",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Capture",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"const expectedAmount = pm.globals.get(\"amount\");",
							"",
							"pm.test(\"Should handle credit card capture\", () => {",
							"  pm.expect(responseJson.amount).to.eql(expectedAmount);",
							"  pm.expect(responseJson.responseCode).to.eql('11000');",
							"  pm.expect(responseJson.responseReason).to.eql(\"PENDING\");",
							"  pm.expect(responseJson.hostTransactionId).be.a('string');",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "channel",
						"type": "text",
						"value": "{{CHANNEL}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"currency\": \"{{currencyCode}}\",\n  \"transactionId\": \"{{hostTransactionId}}\",\n  \"amount\": \"{{amount}}\",\n  \"merchantReferenceNumber\": \"o30446\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/capture",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"capture"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Refund",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"const expectedAmount = pm.globals.get(\"amount\");",
							"",
							"pm.test(\"Should handle credit card capture\", () => {",
							"  pm.expect(responseJson.amount).to.eql(expectedAmount);",
							"  pm.expect(responseJson.responseCode).to.eql('3000');",
							"  pm.expect(responseJson.responseReason).to.eql(\"PENDING\");",
							"  pm.expect(responseJson.hostTransactionId).be.a('string');",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "channel",
						"type": "text",
						"value": "{{CHANNEL}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"currency\": \"{{currencyCode}}\",\n  \"transactionId\": \"{{hostTransactionId}}\",\n  \"amount\": \"{{amount}}\",\n  \"merchantReferenceNumber\": \"o30446\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/refund",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"refund"
					]
				}
			},
			"response": []
		},
		{
			"name": "Report - OnDemand",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Requires a reviewed transaction in the last day",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const plusDays = 1;",
							"const newDate = new Date();",
							"",
							"pm.collectionVariables.set(\"startDate\", getStartDate(-plusDays));",
							"pm.collectionVariables.set(\"endDate\", getEndDate(new Date()));",
							"",
							"function getStartDate(plusDays) {",
							"    const newDate = new Date();",
							"    newDate.setDate(newDate.getDate() + plusDays);",
							"    return newDate.toISOString();",
							"}",
							"",
							"function getEndDate(date){",
							"    const minutes = -1; ",
							"    const res = new Date(date);",
							"    res.setTime(date.getTime() + minutes * 1000 * 60);",
							"    return res.toISOString();",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "channel",
						"type": "text",
						"value": "{{CHANNEL}}"
					}
				],
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/report/onDemand?startTime={{startDate}}&endTime={{endDate}}",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"report",
						"onDemand"
					],
					"query": [
						{
							"key": "startTime",
							"value": "{{startDate}}"
						},
						{
							"key": "endTime",
							"value": "{{endDate}}"
						}
					]
				},
				"description": "As this request requires a reviewed transaction in the last day, no test was added."
			},
			"response": []
		},
		{
			"name": "Report - Daily",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const date = new Date();",
							"",
							"pm.collectionVariables.set(\"dateDailyReport\",getDate());",
							"",
							"function getDate() {",
							"    date.setDate(date.getDate() -1 );",
							"    return date.toISOString().split('T')[0];",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Requires a reviewed transaction in the last day"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "channel",
						"type": "text",
						"value": "{{CHANNEL}}"
					}
				],
				"url": {
					"raw": "{{OCC_ENVIRONMENT}}/ccstorex/custom/isv-payment/v2/report/daily?date={{dateDailyReport}}",
					"host": [
						"{{OCC_ENVIRONMENT}}"
					],
					"path": [
						"ccstorex",
						"custom",
						"isv-payment",
						"v2",
						"report",
						"daily"
					],
					"query": [
						{
							"key": "date",
							"value": "{{dateDailyReport}}"
						}
					]
				},
				"description": "As this request requires a reviewed transaction in the last day, no test was added."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const responseJson = pm.response.json();",
					"pm.test(\"Status code is 200\", () => {",
					"  pm.response.to.have.status(200);",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "OCC_ENVIRONMENT",
			"value": ""
		},
		{
			"key": "CHANNEL",
			"value": "storefront"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "APP_KEY",
			"value": ""
		},
		{
			"key": "authCode",
			"value": ""
		},
		{
			"key": "payments_schema",
			"value": "{\n  \"type\": \"object\",\n  \"required\":[\"paymentMethods\"],\n  \"properties\":\n  {\n    \"paymentMethods\": {\n      \"type\":\"array\",\n      \"minItems\": 1,\n      \"maxItems\": 3,\n      \"items\": {\n          \"type\": \"object\"\n      }\n  }\n  }\n\n}"
		},
		{
			"key": "applePayInitiativeContext",
			"value": "asbx80c1dev-store.occa.ocs.oraclecloud.com"
		},
		{
			"key": "startDate",
			"value": "2022-10-12T18:30:00.732Z"
		},
		{
			"key": "endDate",
			"value": "2022-10-13T18:29:00.732Z"
		},
		{
			"key": "dateDailyReport",
			"value": ""
		},
		{
			"key": "webhook_signature",
			"value": ""
		}
	]
}